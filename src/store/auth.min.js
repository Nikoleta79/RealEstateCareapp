import { createApp } from "vue";
import Vuex from "vuex";
import VuexPersist from "vuex-persist";

// Initialize VuexPersist to persist the necessary state in localStorage
const vuexPersist = new VuexPersist({
    key: "vuex",
    storage: window.localStorage,
    reducer: (state) => ({
        user: state.user,
        completion: state.completion,
        address: state.address,
        inspection: state.inspection,
        offlineInspections: state.offlineInspections,
    }),
});

// Initialize the Vue app
import App from "@/App.vue";
const app = createApp(App);

// Create the Vuex store
export default new Vuex.Store({
    state: {
        // Ensure that user.settings is always defined with default values
        user: {
            settings: {
                darkTheme: false, // Default darkTheme set to false
                notifications: true, // Default notifications set to true
            },
        },
        completion: false, // Completion flag
        address: 0, // Default address set to 0
        inspection: 0, // Default inspection set to 0
        offlineInspections: [], // Default offline inspections as an empty array
    },
    getters: {
        // Get user data
        user: (state) => state.user,
        userID: (state) => (state.user && state.user.id ? state.user.id : null),
        userNotifications: (state) =>
            state.user.settings ? state.user.settings.notifications : false,
        completion: (state) => state.completion,
        address: (state) => state.address,
        inspection: (state) => state.inspection,
        offlineInspections: (state) => state.offlineInspections,
        // Get the darkTheme setting with a fallback
        darkTheme: (state) => {
            return state.user &&
            state.user.settings &&
            typeof state.user.settings.darkTheme === "boolean"
                ? state.user.settings.darkTheme
                : false; // Default to false if darkTheme is not defined or invalid
        },
    },
    mutations: {
        setUser(state, newUser) {
            state.user = newUser;
        },
        toggleCompletion(state, value) {
            state.completion = value;
        },
        changeAddress(state, newAddress) {
            state.address = newAddress;
        },
        changeInspection(state, newInspection) {
            state.inspection = newInspection;
        },
        setOfflineInspections(state, newOfflineInspections) {
            state.offlineInspections = newOfflineInspections;
        },
    },
    plugins: [vuexPersist.plugin],
});
